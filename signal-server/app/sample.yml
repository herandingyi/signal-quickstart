# Example, relatively minimal, configuration that passes validation (see `io.dropwizard.cli.CheckCommand`)
#
# `unset` values will need to be set to work properly.
# Most other values are technically valid for a local/demonstration environment, but are probably not production-ready.

stripe:
  apiKey: unset
  idempotencyKeyGenerator: abcdefg12345678= # base64 for creating request idempotency hash
  boostDescription: >
    Example

dynamoDbClientConfiguration:
  region: http://172.23.0.3:8000 # AWS Region

dynamoDbTables:
  accounts:
    tableName: Example_Accounts
    phoneNumberTableName: Example_Accounts_PhoneNumbers
    phoneNumberIdentifierTableName: Example_Accounts_PhoneNumberIdentifiers
    usernamesTableName: Example_Accounts_Usernames
    scanPageSize: 100
  deletedAccounts:
    tableName: Example_DeletedAccounts
    needsReconciliationIndexName: NeedsReconciliation
  deletedAccountsLock:
    tableName: Example_DeletedAccountsLock
  issuedReceipts:
    tableName: Example_IssuedReceipts
    expiration: P30D # Duration of time until rows expire
    generator: abcdefg12345678= # random base64-encoded binary sequence
  keys:
    tableName: Example_Keys
  messages:
    tableName: Example_Messages
    expiration: P30D # Duration of time until rows expire
  pendingAccounts:
    tableName: Example_PendingAccounts
  pendingDevices:
    tableName: Example_PendingDevices
  phoneNumberIdentifiers:
    tableName: Example_PhoneNumberIdentifiers
  profiles:
    tableName: Example_Profiles
  pushChallenge:
    tableName: Example_PushChallenge
  redeemedReceipts:
    tableName: Example_RedeemedReceipts
    expiration: P30D # Duration of time until rows expire
  remoteConfig:
    tableName: Example_RemoteConfig
  reportMessage:
    tableName: Example_ReportMessage
  reservedUsernames:
    tableName: Example_ReservedUsernames
  subscriptions:
    tableName: Example_Subscriptions

twilio: # Twilio gateway configuration
  accountId: unset
  accountToken: unset
  nanpaMessagingServiceSid: unset # Twilio SID for the messaging service to use for NANPA.
  messagingServiceSid: unset # Twilio SID for the message service to use for non-NANPA.
  verifyServiceSid: unset # Twilio SID for a Verify service
  localDomain: example.com # Domain Twilio can connect back to for calls. Should be domain of your service.
  defaultClientVerificationTexts:
    ios: example %1$s # Text to use for the verification message on iOS. Will be passed to String.format with the verification code as argument 1.
    androidNg: example %1$s # Text to use for the verification message on android-ng client types. Will be passed to String.format with the verification code as argument 1.
    android202001: example %1$s # Text to use for the verification message on android-2020-01 client types. Will be passed to String.format with the verification code as argument 1.
    android202103: example %1$s # Text to use for the verification message on android-2021-03 client types. Will be passed to String.format with the verification code as argument 1.
    generic: example %1$s # Text to use when the client type is unrecognized. Will be passed to String.format with the verification code as argument 1.
  regionalClientVerificationTexts: # Map of country codes to custom texts
    999: # example country code
      ios: example %1$s # all keys from defaultClientVerificationTexts are required
      androidNg: example %1$s
      android202001: example %1$s
      android202103: example %1$s
      generic: example %1$s
  androidAppHash: example # Hash appended to Android
  verifyServiceFriendlyName: example # Service name used in template. Requires Twilio account rep to enable

cacheCluster: # Redis server configuration for cache cluster
  configurationUri: redis://172.23.1.1:6379/

clientPresenceCluster: # Redis server configuration for client presence cluster
  configurationUri: redis://172.23.1.1:6379/

pubsub: # Redis server configuration for pubsub cluster
  url: redis://172.23.1.1:6379/
  replicaUrls:
    - redis://172.23.1.1:6379/

pushSchedulerCluster: # Redis server configuration for push scheduler cluster
  configurationUri: redis://172.23.1.1:6379/

rateLimitersCluster: # Redis server configuration for rate limiters cluster
  configurationUri: redis://172.23.1.1:6379/

directory:
  client: # Configuration for interfacing with Contact Discovery Service cluster
    userAuthenticationTokenSharedSecret: 00000f # hex-encoded secret shared with CDS used to generate auth tokens for Signal users
    userAuthenticationTokenUserIdSecret: 00000f # hex-encoded secret shared among Signal-Servers to obscure user phone numbers from CDS
  sqs:
    accessKey: test     # AWS SQS accessKey
    accessSecret: test  # AWS SQS accessSecret
    queueUrls: # AWS SQS queue urls
      - https://sqs.example.com/directory.fifo
  server: [] # One or more CDS servers


directoryV2:
  client: # Configuration for interfacing with Contact Discovery Service v2 cluster
    userAuthenticationTokenSharedSecret: abcdefghijklmnopqrstuvwxyz0123456789ABCDEFG= # base64-encoded secret shared with CDS to generate auth tokens for Signal users
    userIdTokenSharedSecret: bbcdefghijklmnopqrstuvwxyz0123456789ABCDEFG= # base64-encoded secret shared with CDS to generate auth identity tokens for Signal users

messageCache: # Redis server configuration for message store cache
  persistDelayMinutes: 1
  cluster:
    configurationUri: redis://172.23.1.1:6379/

metricsCluster:
  configurationUri: redis://172.23.1.1:6379/

awsAttachments: # AWS S3 configuration
  accessKey: test
  accessSecret: test
  bucket: aws-attachments
  region: us-west-2

gcpAttachments: # GCP Storage configuration
  domain: example.com
  email: user@example.cocm
  maxSizeInBytes: 1024
  pathPrefix:
  rsaSigningKey: |
    -----BEGIN PRIVATE KEY-----
    MIICeAIBADANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBAPMXifoF/PhdJl1Z8WeaPAECaWZk
    VgNVgla7E8SLn3Kp375DXug7F+PS5lrN6Aa6Soel0qgrrIvlmh5WGOSyk7WvR7t+VJ0tMhG4VAeN
    aAupQZJOdPMqIPebeYgOia3jlF2AkcHRWDXbl5FlRovTXe0GtEqyEZnluRiigB5JNoUTAgMBAAEC
    gYAG2ppzG5yDuCsIi/lCRyP7KoE93muNnoL7q2/ZC8+MFEp3R9j/ygklAEfeAyfQM/JwzqkY2sDI
    e2Ng1Zac5B54ykEphmlIqmvPfCHqtoi9GEx16Ms/1ca0EgCbq1wULoFu6fP302sNoC8WPQ2MCQPr
    IZuGkK/f/kj7PtkgiamUWQJBAPbqPDFy5niEeOqsWaLqfTCYpIJp+81Cm3EjxnypjK9+Y5NxIa4z
    cwuFWLMsxfiiJuEpr90/j6KNPxQUNyfDAp0CQQD8CUsoBypDj5n5mcNpKsluG+soPDNSGTTqUTO0
    xJFXqWIrBGS0RTq7BlTUC7Ze2smQp7Pg0A/ILRs4wA5P5v9vAkEA9ilV81KC1Nn1FrjW8GXog19a
    ey4gPGXQRH6PLs92E6vkqCTcmChw5KZ/ZLoZcKRwMIB39RKeJ0e8AE+bIUf4vQJBAPA543rZqX0P
    6NExsEITWD8tOSz2hGwiPn+Aumn4WhhWCI27+EijG+GbnUsnhsJOg4Tvc9I6PnCsHaAv3vRl1t0C
    QQDYAcnjb4JMLXQVRRCLMxIqwWwxpHQ0GcIALisieD1BuKKRjeOIBLpeUXdrNTALasD7sxC/Q0vR
    XagaYZ4I4jTm
    -----END PRIVATE KEY-----

accountDatabaseCrawler:
  chunkSize: 10           # accounts per run
  chunkIntervalMs: 60000  # time per run

apn: # Apple Push Notifications configuration
  sandbox: true
  bundleId: com.example.textsecuregcm
  keyId: unset
  teamId: unset
  signingKey: |
    -----BEGIN PRIVATE KEY-----
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    AAAAAAAA
    -----END PRIVATE KEY-----

gcm: # GCM Configuration
  senderId: 123456789
  apiKey: unset

cdn:
  accessKey: test    # AWS Access Key ID
  accessSecret: test # AWS Access Secret
  bucket: cdn        # S3 Bucket name
  region: us-west-2  # AWS region

datadog:
  apiKey: unset
  environment: dev

unidentifiedDelivery:
  certificate: CigIzuPSCRIhBfhEC7qO9ssVdfxHs53Jz4ie9Kn/7Y+IGRvEbUATPXhAEkCRAnRZX9I+8EoqvZ96ZtmSVoGm4tlKPPR8MWpQteqf61zoEFAc2bT0vC1DrtOn/7jvmLHu0/NlfVin+2Q/Wq+B
  privateKey: QAiijF0W3n4BP+SUCeTgQGUf3380ESfNcV8YueLfH2k=
  expiresDays: 365

voiceVerification:
  url: https://cdn-ca.signal.org/verification/
  locales:
    - en

recaptcha:
  projectPath: projects/example
  credentialConfigurationJson: "{ }" # service account configuration for backend authentication

storageService:
  uri: storage.example.com
  userAuthenticationTokenSharedSecret: 00000f
  storageCaCertificate: |
    -----BEGIN CERTIFICATE-----
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    AAAAAAAAAAAAAAAAAAAA
    -----END CERTIFICATE-----

backupService:
  uri: backup.example.com
  userAuthenticationTokenSharedSecret: 00000f
  backupCaCertificate: |
    -----BEGIN CERTIFICATE-----
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    AAAAAAAAAAAAAAAAAAAA
    -----END CERTIFICATE-----

zkConfig:
  serverPublic: AHLJ4hK6fVDqEG8E6Tq1I7X6byuD7Sk8CDL6shz7H3gg5kEDzXNcu3KNlMEDCmrw0ac+ph+rQL5qgPpssNpsu08o00vbXvtPJTlBOKKfK1qgs37Ip8fu04x7hjvetSzvcwZZ5syoC5ELzU9mHIxkEkbA6yyi2ODj61waRSOTsYkl0q2/0mV15IIDIzleos58sR/dpp2QqwB0KE2TiRpJExvkqD0/XhA7pHBtoW+BGioU5KzTaV8HGthDAVYXdTENLnqd4LY3okERSac/Lb+OihFKbBw1jjaAS/Uqps5fNqoT1GySCoDiAd+dya3pK/hAKiqSvBD62p7ean2Yu6adgnkGOsrIgAhTV13e9UtKGOENLpeDGzNl/V4TzvXFxe3ZTQ
  serverSecret: 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

appConfig:
  endpoint: http://172.23.0.2:9007
  application: example
  environment: example
  configuration: example

remoteConfig:
  authorizedTokens:
    - # 1st authorized token
    - # 2nd authorized token
    - # ...
    - # Nth authorized token
  globalConfig: # keys and values that are given to clients on GET /v1/config
    EXAMPLE_KEY: VALUE

paymentsService:
  userAuthenticationTokenSharedSecret: 0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f # hex-encoded 32-byte secret shared with MobileCoin services used to generate auth tokens for Signal users
  fixerApiKey: unset
  paymentCurrencies:
    # list of symbols for supported currencies
    - MOB

donation:
  uri: donation.example.com # value
  supportedCurrencies:
    - # 1st supported currency
    - # 2nd supported currency
    - # ...
    - # Nth supported currency

badges:
  badges:
    - id: TEST
      category: other
      sprites: # exactly 6
        - sprite-1.png
        - sprite-2.png
        - sprite-3.png
        - sprite-4.png
        - sprite-5.png
        - sprite-6.png
      svg: example.svg
      svgs:
        - light: example-light.svg
          dark: example-dark.svg
  badgeIdsEnabledForAll:
    - TEST
  receiptLevels:
    '1': TEST

subscription: # configuration for Stripe subscriptions
  badgeGracePeriod: P15D
  levels:
    500:
      badge: EXAMPLE
      prices:
        # list of ISO 4217 currency codes and amounts for the given badge level
        xts:
          amount: '10'
          id: price_example # stripe ID

boost:
  level: 1
  expiration: P90D
  badge: EXAMPLE
  currencies:
    # ISO 4217 currency codes and amounts in those currencies
    xts:
      - '1'
      - '2'
      - '4'
      - '8'
      - '20'
      - '40'

gift:
  level: 10
  expiration: P90D
  badge: EXAMPLE
  currencies:
    # ISO 4217 currency codes and amounts in those currencies
    xts: '2'
